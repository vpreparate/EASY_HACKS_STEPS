import os
import platform
import subprocess
from pathlib import Path
import logging
import tempfile
import shutil
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = ''  # –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_paths = {}  # user_id -> —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å (str)
user_waiting_for_file = {}  # user_id -> bool, –∂–¥—ë–º –ª–∏ —Ñ–∞–π–ª
MAX_BUTTONS = 40  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ

def is_root_path(path_str):
    return path_str == 'ROOT'

def set_user_path(user_id, path_str):
    user_paths[user_id] = path_str

def get_user_path(user_id):
    if user_id not in user_paths:
        if platform.system() == 'Windows':
            user_paths[user_id] = 'ROOT'  # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –¥–∏—Å–∫–æ–≤
        else:
            user_paths[user_id] = str(Path.home())
    return user_paths[user_id]

async def build_keyboard(user_id):
    path_str = get_user_path(user_id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Å–∫–∏ Windows (–µ—Å–ª–∏ –≤ –∫–æ—Ä–Ω–µ)
    if platform.system() == 'Windows' and is_root_path(path_str):
        import string
        disks = [f"{d}:\\"
                 for d in string.ascii_uppercase
                 if Path(f"{d}:\\").exists()]
        for d in disks:
            kb.insert(types.KeyboardButton(f"üìÅ {d}"))
        return kb

    current_path = Path(path_str)
    kb.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

    try:
        items = list(current_path.iterdir())
    except Exception:
        items = []

    folders = [i for i in items if i.is_dir()]
    files = [i for i in items if i.is_file()]

    total_items = len(folders) + len(files)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if total_items > MAX_BUTTONS:
        if len(folders) > MAX_BUTTONS:
            # –û—á–µ–Ω—å –º–Ω–æ–≥–æ –ø–∞–ø–æ–∫ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ MAX_BUTTONS —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            shown_folders = sorted(folders, key=lambda x: x.name)[:MAX_BUTTONS]
            for folder in shown_folders:
                kb.insert(types.KeyboardButton(f"üìÅ {folder.name}"))
            return kb
        else:
            # –ú–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤
            for folder in sorted(folders, key=lambda x: x.name):
                kb.insert(types.KeyboardButton(f"üìÅ {folder.name}"))
            kb.add(types.KeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã"))
            return kb
    else:
        # –í—Å—ë –ø–æ–º–µ—â–∞–µ—Ç—Å—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if current_path != current_path.anchor:
            kb.add(types.KeyboardButton("‚¨ÜÔ∏è –í–≤–µ—Ä—Ö"))
        for folder in sorted(folders, key=lambda x: x.name):
            kb.insert(types.KeyboardButton(f"üìÅ {folder.name}"))
        for file in sorted(files, key=lambda x: x.name):
            kb.insert(types.KeyboardButton(f"üìÑ {file.name}"))
        kb.add(types.KeyboardButton("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–ø–∫—É"))
        kb.add(types.KeyboardButton("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"))
        return kb

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    if platform.system() == 'Windows':
        set_user_path(user_id, 'ROOT')
    else:
        set_user_path(user_id, str(Path.home()))
    user_waiting_for_file[user_id] = False
    kb = await build_keyboard(user_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫ –∏–ª–∏ –ø–∞–ø–∫—É:", reply_markup=kb)

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_document(message: types.Message):
    user_id = message.from_user.id
    if not user_waiting_for_file.get(user_id, False):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª' –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∞–π–ª–∞.")
        return

    current_path_str = get_user_path(user_id)
    current_path = Path(current_path_str)
    document = message.document

    save_path = current_path / document.file_name

    try:
        file = await bot.get_file(document.file_id)
        await bot.download_file(file.file_path, destination=str(save_path))
        user_waiting_for_file[user_id] = False
        kb = await build_keyboard(user_id)
        await message.answer(f"–§–∞–π–ª '{document.file_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ:\n{current_path}", reply_markup=kb)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

@dp.message_handler(lambda message: message.text == "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã")
async def show_files_only(message: types.Message):
    user_id = message.from_user.id
    current_path_str = get_user_path(user_id)
    current_path = Path(current_path_str)

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

    try:
        items = list(current_path.iterdir())
    except Exception:
        items = []

    files = [i for i in items if i.is_file()]
    shown_files = sorted(files, key=lambda x: x.name)[:MAX_BUTTONS]

    for file in shown_files:
        kb.insert(types.KeyboardButton(f"üìÑ {file.name}"))

    if len(files) > MAX_BUTTONS:
        await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–µ —Ñ–∞–π–ª—ã.", reply_markup=kb)
    else:
        await message.answer("–§–∞–π–ª—ã:", reply_markup=kb)

@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    current_path_str = get_user_path(user_id)

    if user_waiting_for_file.get(user_id, False):
        if message.content_type != 'document':
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Å–∫–∞ Windows
    if platform.system() == 'Windows' and is_root_path(current_path_str):
        if text and text.startswith("üìÅ ") and text[2:].endswith(":\\"):
            disk_path = text[2:]
            path_obj = Path(disk_path)
            if path_obj.exists():
                set_user_path(user_id, disk_path)
                kb = await build_keyboard(user_id)
                await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏—Å–∫ {disk_path}", reply_markup=kb)
            else:
                await message.answer("–î–∏—Å–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    current_path = Path(current_path_str)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        set_user_path(user_id, 'ROOT' if platform.system() == 'Windows' else str(Path.home()))
        kb = await build_keyboard(user_id)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫ –∏–ª–∏ –ø–∞–ø–∫—É:", reply_markup=kb)
        return

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–≤–µ—Ä—Ö
    if text == "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö":
        if platform.system() == 'Windows':
            if current_path == Path(current_path.anchor):
                set_user_path(user_id, 'ROOT')
                kb = await build_keyboard(user_id)
                await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –¥–∏—Å–∫–æ–≤.", reply_markup=kb)
                return
        else:
            home = Path.home()
            if current_path == home:
                await message.answer("–í—ã –∏ —Ç–∞–∫ –≤ –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ.")
                return
        set_user_path(user_id, str(current_path.parent))
        kb = await build_keyboard(user_id)
        await message.answer(f"–ü–µ—Ä–µ—à–ª–∏ –≤ –ø–∞–ø–∫—É: {current_path.parent}", reply_markup=kb)
        return

    # –í—Ö–æ–¥ –≤ –ø–∞–ø–∫—É
    if text and text.startswith("üìÅ "):
        folder_name = text[2:].strip()
        target_path = current_path / folder_name
        if target_path.exists() and target_path.is_dir():
            set_user_path(user_id, str(target_path))
            kb = await build_keyboard(user_id)
            await message.answer(f"–ü–∞–ø–∫–∞: {target_path}", reply_markup=kb)
        else:
            await message.answer("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    if text and text.startswith("üìÑ "):
        file_name = text[2:].strip()
        file_path = current_path / file_name
        if file_path.exists() and file_path.is_file():
            stat = file_path.stat()
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"run|{file_path}"),
                InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", callback_data=f"download|{file_path}")
            )
            await message.answer(
                f"–§–∞–π–ª: {file_path.name}\n–†–∞–∑–º–µ—Ä: {stat.st_size} –±–∞–π—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=kb
            )
        else:
            await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–ø–∫–∏ - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    if text == "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–ø–∫—É":
        folder_path = current_path

        await message.answer("–ê—Ä—Ö–∏–≤–∏—Ä—É—é –ø–∞–ø–∫—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

        async def archive_and_send():
            try:
                with tempfile.TemporaryDirectory() as tmpdir:
                    archive_name = os.path.join(tmpdir, "archive")
                    shutil.make_archive(archive_name, 'zip', root_dir=folder_path)
                    zip_path = archive_name + '.zip'
                    await bot.send_document(message.chat.id, open(zip_path, 'rb'))
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

        asyncio.create_task(archive_and_send())
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
    if text == "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        user_waiting_for_file[user_id] = True
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        return

    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")

@dp.callback_query_handler(lambda c: c.data and (c.data.startswith("run|") or c.data.startswith("download|")))
async def handle_callback(call: types.CallbackQuery):
    action, path_str = call.data.split('|', 1)
    path = Path(path_str)
    user_id = call.from_user.id
    current_path_str = get_user_path(user_id)
    current_path = Path(current_path_str)

    try:
        path.relative_to(current_path)
    except Exception:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    if not path.exists() or not path.is_file():
        await call.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if action == "run":
        try:
            if platform.system() == 'Windows':
                os.startfile(str(path))
            else:
                subprocess.Popen([str(path)])
            await call.answer("–§–∞–π–ª –∑–∞–ø—É—â–µ–Ω.")
        except Exception as e:
            await call.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", show_alert=True)

    elif action == "download":
        try:
            await bot.send_document(call.from_user.id, open(path, 'rb'))
            await call.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            await call.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", show_alert=True)

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp)
    
